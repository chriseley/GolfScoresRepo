@page "/golfers/delete/{GolferId:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation

<h3>Delete Golfer #@GolferId</h3>

@if (Message != null)
{
    <h2 class="text-danger">@Message</h2>
}

@if (Golfer != null)
{
    <div class="container">
        <div class="card">
            <div class=" card-header d-flex justify-content-between">
                <span>Golfer #@Golfer.Id</span>
                <span class="text-muted"><strong>@Golfer.Name</strong></span>
            </div>
            <div class="card-body">
                <h4 class="card-text">@Golfer.Age</h4>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-50">
                <a href=@("$/golfers/edit/{GolferId}") class="btn btn-outline-primary">Back to Index</a>
                <a href="#" @onclick="HandleClick" class="btn btn-danger text-white">Delete Golfer</a>
                <hr />
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int GolferId { get; set; }
    public GolferDetail Golfer { get; set; }
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Golfer = await http.GetFromJsonAsync<GolferDetail>($"api/golfers/{GolferId}");
    }

    private async void HandleClick()
    {
        var deleteGo = await http.DeleteAsync($"api/golfers/{GolferId}");

        if (deleteGo.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/golfer");
        }

        else
        {
            Message = "Falied to delete golfer";
        }
    }
}
